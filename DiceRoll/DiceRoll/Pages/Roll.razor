@using DiceRoll.ViewModels
@page "/roll"

@inherits RollBase

<EditForm Model="@Roll" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3 row">
        <div class="col-12 d-flex">
            <h1 class="text-button-align">Roll</h1>
            <button class="btn btn-primary ms-auto" type="submit">
                <span class="fa fa-dice me-2" aria-hidden="true"></span>Roll !
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="mb-3 row">
                <div class="col-12 d-flex">
                    <h3 class="me-3">Attackers</h3>
                    <button class="btn btn-primary ms-auto" type="button" @onclick="@(() => GetAction(EventCallbackTarget.Attacker, EventCallbackAction.Add)(null))">
                        <span class="fa fa-plus me-2" aria-hidden="true"></span>Add attacker profile
                    </button>
                </div>
            </div>
            @foreach (var attacker in Roll.Attackers.OrderBy(a => a.Order))
            {
                <Attacker ListDetail="attacker"
                    IsFirst=@(attacker.Order == 1)
                    IsLast=@(attacker.Order == Roll.Attackers.Count)
                    ListDetailMovedUpAction="@GetAction(EventCallbackTarget.Attacker, EventCallbackAction.MoveUp)"
                    ListDetailMovedDownAction="@GetAction(EventCallbackTarget.Attacker, EventCallbackAction.MoveDown)"
                    ListDetailDuplicatedAction="@GetAction(EventCallbackTarget.Attacker, EventCallbackAction.Duplicate)"
                    ListDetailDeletedAction="@GetAction(EventCallbackTarget.Attacker, EventCallbackAction.Delete)"></Attacker>
            }
        </div>

        <div class="col-md-6">
            <div class="mb-3 row">
                <div class="col-12 d-flex">
                    <h3 class="me-3">Defenders</h3>
                    <button class="btn btn-primary ms-auto" type="button" @onclick="@(() => GetAction(EventCallbackTarget.Defender, EventCallbackAction.Add)(null))">
                        <span class="fa fa-plus me-2" aria-hidden="true"></span>Add defender profile
                    </button>
                </div>
            </div>
            @foreach (var defender in Roll.Defenders.OrderBy(d => d.Order))
            {
                <Defender ListDetail="defender"
                    IsFirst=@(defender.Order == 1)
                    IsLast=@(defender.Order == Roll.Defenders.Count)
                    ListDetailMovedUpAction="@GetAction(EventCallbackTarget.Defender, EventCallbackAction.MoveUp)"
                    ListDetailMovedDownAction="@GetAction(EventCallbackTarget.Defender, EventCallbackAction.MoveDown)"
                    ListDetailDuplicatedAction="@GetAction(EventCallbackTarget.Defender, EventCallbackAction.Duplicate)"
                    ListDetailDeletedAction="@GetAction(EventCallbackTarget.Defender, EventCallbackAction.Delete)"></Defender>
            }
        </div>
    </div>
</EditForm>
